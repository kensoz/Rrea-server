{"version":3,"file":"app.min.js","sources":["../src/config/index.ts","../src/models/areas.model.ts","../src/models/names.model.ts","../src/models/jobs.model.ts","../src/models/races.model.ts","../src/router/routes/form.route.ts","../src/controllers/form.controller.ts","../src/models/users.model.ts","../src/controllers/units/data.handle.ts","../src/router/routes/data.route.ts","../src/controllers/data.controller.ts","../src/controllers/units/form.crud.ts","../src/controllers/job.controller.ts","../src/log/index.ts","../src/middleware/jwt/checkPermission.ts","../src/router/routes/job.route.ts","../src/controllers/race.controller.ts","../src/router/routes/race.route.ts","../src/controllers/user.controller.ts","../src/router/routes/user.route.ts","../src/controllers/area.controller.ts","../src/router/routes/area.route.ts","../src/controllers/name.controller.ts","../src/router/routes/name.route.ts","../src/models/auth.model.ts","../src/controllers/auth.controller.ts","../src/router/routes/auth.route.ts","../src/router/index.ts","../src/error/errorGraphQL.ts","../src/graphql/resolvers/form.resolvers.ts","../src/graphql/schema/typeDefs.ts","../src/graphql/index.ts","../src/graphql/resolvers/data.resolvers.ts","../src/error/index.ts","../src/app.ts","../src/database/index.ts","../src/middleware/jwt/jwtErrorHandle.ts"],"sourcesContent":["import type { IConfig } from '../types/common.type'\r\n\r\n// jwt認証制限時間\r\n// 60 seconds * 60 minutes = 1 hour\r\n// 60 seconds * 60 minutes * 60 hour = 60 hour　←\r\nconst time: number = Math.floor(Date.now() / 1000) + 60 * 60 * 60\r\n\r\n// コンフィグ\r\nconst config: IConfig = {\r\n  host: process.env.NODE_ENV === 'development' ? 7001 : 7002,\r\n  apiPrefix: '/api/v1',\r\n  dataBase: process.env.NODE_ENV === 'development' ? 'areadb' : 'rrea',\r\n  dataBaseUrl:\r\n    process.env.NODE_ENV === 'development' ? 'mongodb://127.0.0.1:27017/' : 'mongodb://admin:admin@database:27017/',\r\n  secret: 'maeda',\r\n  jwtLimitTime: time,\r\n  passwordKey: '1234123412ABCDEF',\r\n  passwordIV: 'ABCDEF1234123412',\r\n}\r\n\r\nexport default config\r\n","import { Schema, model } from 'mongoose'\r\nimport type { IFormSchema } from '../types/form.type'\r\n\r\n// ----- エリア -----\r\n// schema\r\nconst schema = new Schema<IFormSchema>(\r\n  {\r\n    value: { type: String, required: true },\r\n    text: { type: String, required: true },\r\n  },\r\n  { versionKey: false },\r\n)\r\n\r\n// model\r\nconst areas = model<IFormSchema>('areas', schema)\r\n\r\nexport default areas\r\n","import { Schema, model } from 'mongoose'\r\nimport type { IFormSchema } from '../types/form.type'\r\n\r\n// ----- ネーム -----\r\n// schema\r\nconst schema = new Schema<IFormSchema>(\r\n  {\r\n    value: { type: String, required: true },\r\n    text: { type: String, required: true },\r\n  },\r\n  { versionKey: false },\r\n)\r\n// model\r\nconst names = model<IFormSchema>('names', schema)\r\n\r\nexport default names\r\n","import { Schema, model } from 'mongoose'\r\nimport type { IFormSchema } from '../types/form.type'\r\n\r\n// ----- 職務 -----\r\n// schema\r\nconst schema = new Schema<IFormSchema>(\r\n  {\r\n    value: { type: String, required: true },\r\n    text: { type: String, required: true },\r\n  },\r\n  { versionKey: false },\r\n)\r\n\r\n// model\r\nconst jobs = model<IFormSchema>('jobs', schema)\r\n\r\nexport default jobs\r\n","import { Schema, model } from 'mongoose'\r\nimport type { IFormSchema } from '../types/form.type'\r\n\r\n// ----- 種族 -----\r\n// schema\r\nconst schema = new Schema<IFormSchema>(\r\n  {\r\n    value: { type: String, required: true },\r\n    text: { type: String, required: true },\r\n  },\r\n  { versionKey: false },\r\n)\r\n\r\n// model\r\nconst races = model<IFormSchema>('races', schema)\r\n\r\nexport default races\r\n","import Router from 'koa-router'\r\nimport formController from '../../controllers/form.controller'\r\n\r\n// ----- フォーム router -----\r\n\r\nconst formRouter = new Router()\r\n\r\nformRouter.get('/', formController)\r\n\r\nexport default formRouter\r\n","import areas from '../models/areas.model'\r\nimport names from '../models/names.model'\r\nimport jobs from '../models/jobs.model'\r\nimport races from '../models/races.model'\r\nimport type { ICTXGet } from '../types/ctx.type'\r\nimport type { IFormSchema, IFormGroupResponse } from '../types/form.type'\r\n\r\n// ----- フォームCRUD controller -----\r\n/**\r\n *  読み取り\r\n *  @param {ICTXGet<{}, IFormGroupResponse>} ctx koaコンテンツ\r\n */\r\n\r\nconst formController = async (ctx: ICTXGet<{}, IFormGroupResponse>): Promise<void> => {\r\n  try {\r\n    const area: IFormSchema[] = await areas.find({}, { _id: 0 })\r\n    const name: IFormSchema[] = await names.find({}, { _id: 0 })\r\n    const race: IFormSchema[] = await races.find({}, { _id: 0 })\r\n    const job: IFormSchema[] = await jobs.find({}, { _id: 0 })\r\n    const formResponseData: IFormGroupResponse = { area, name, race, job }\r\n\r\n    ctx.body = {\r\n      code: 10011,\r\n      message: '取得成功',\r\n      result: formResponseData,\r\n    }\r\n\r\n    ctx.app.emit('log', 'formController読み取り')\r\n  } catch {\r\n    ctx.app.emit('error', 10012, ctx)\r\n  }\r\n}\r\n\r\nexport default formController\r\n","import { Schema, model } from 'mongoose'\r\nimport type { IUserSchema } from '../types/user.type'\r\n\r\n// ----- メンバー -----\r\n// schema\r\nconst schema = new Schema<IUserSchema>(\r\n  {\r\n    id: { type: String, required: true },\r\n    name: { type: String, required: true },\r\n    nameSpell: { type: String, required: true },\r\n    nameCode: { type: String, required: true },\r\n    job: { type: String, required: true },\r\n    jobCode: { type: String, required: true },\r\n    race: { type: String, required: true },\r\n    raceCode: { type: String, required: true },\r\n    skill: { type: String, required: true },\r\n    photo: { type: String, required: true },\r\n  },\r\n  { versionKey: false },\r\n)\r\n\r\n// model\r\nconst users = model<IUserSchema>('users', schema)\r\n\r\nexport default users\r\n","import dayjs from 'dayjs'\r\nimport type { IUserSchema, IDataResponse, ICount, IHandleDataResponse } from '../../types/user.type'\r\nimport type { IFormSchema } from '../../types/form.type'\r\n\r\n// ----- データCRUD controller unit -----\r\n/**\r\n *  graphql data 読み取り\r\n *  @param {Array} data ユーザーのデータ\r\n *  @param {Array} area エリアのデータ\r\n *  @param {string} code 選択されたエリア番号\r\n *  @return data & count\r\n */\r\n\r\nconst dataHandle = (data: IDataResponse, area: IFormSchema[], code: string): IHandleDataResponse => {\r\n  let count: ICount[] = []\r\n  for (let i = 0; i < 5; i++) {\r\n    count.push({ count: 0 })\r\n  }\r\n\r\n  // 仮エリアデータ作成\r\n  data.map((i: IUserSchema): void => {\r\n    const areaRandom: IFormSchema = area[Math.floor(Math.random() * area.length)]\r\n    Object.assign(i, {\r\n      area: areaRandom.text,\r\n      areaCode: areaRandom.value,\r\n      YYYYMMDD: dayjs().format('YYYY-MM-DD'),\r\n      HHMMss: dayjs().format('HH:mm:ss'),\r\n    })\r\n\r\n    // エリアの数集計\r\n    count[Number(areaRandom.value) - 1].count++\r\n  })\r\n\r\n  // 指定したエリアを絞り込み、ソート順処理\r\n  const user: IDataResponse = code === '' ? data : data.filter((i: IUserSchema): boolean => i.areaCode === code)\r\n  user.sort((a: IUserSchema, b: IUserSchema): number => {\r\n    return Number(a.areaCode) - Number(b.areaCode)\r\n  })\r\n\r\n  // 仮データによって在席情報を作成\r\n  area.map((item: IFormSchema, index: number): void => {\r\n    Object.assign(count[index], { area: item.text }, { value: Number(item.value) })\r\n  })\r\n  // 全員総数作成\r\n  count.unshift({\r\n    count: data.length,\r\n    area: '全員',\r\n    value: 0,\r\n  })\r\n\r\n  return {\r\n    count,\r\n    user,\r\n  }\r\n}\r\n\r\nexport default dataHandle\r\n","import Router from 'koa-router'\r\nimport dataController from '../../controllers/data.controller'\r\n\r\n// ----- データ router -----\r\n\r\nconst dataRouter = new Router()\r\n\r\ndataRouter.post('/', dataController)\r\n\r\nexport default dataRouter\r\n","import users from '../models/users.model'\r\nimport areas from '../models/areas.model'\r\nimport dataHandle from '../controllers/units/data.handle'\r\nimport type { ICTXPost } from '../types/ctx.type'\r\nimport type { IDataRequest, IUserSchema, IDataResponse, ICount, IHandleDataResponse } from '../types/user.type'\r\nimport type { IFormSchema } from '../types/form.type'\r\n\r\n// ----- データCRUD controller -----\r\n/**\r\n *  読み取り\r\n *  @param {ICTXPost<IDataRequest, IHandleDataResponse>} ctx koaコンテンツ\r\n */\r\n\r\nconst dataController = async (ctx: ICTXPost<IDataRequest, IHandleDataResponse>): Promise<void> => {\r\n  if (ctx.request.body === undefined) {\r\n    ctx.app.emit('error', 10019, ctx)\r\n    return\r\n  }\r\n\r\n  try {\r\n    // エリア,ユーザー取得\r\n    const req: IDataRequest = ctx.request.body\r\n    const area: IFormSchema[] = await areas.find({}, { _id: 0 })\r\n    const user: IUserSchema[] = await users.find(\r\n      {\r\n        raceCode: req.raceCode.length === 0 ? { $type: 'string' } : { $in: req.raceCode },\r\n        nameCode: req.nameCode.length === 0 ? { $type: 'string' } : { $in: req.nameCode },\r\n        jobCode: req.jobCode.length === 0 ? { $type: 'string' } : { $in: req.jobCode },\r\n      },\r\n      { _id: 0 },\r\n    )\r\n\r\n    // データ処理\r\n    const data: IDataResponse = JSON.parse(JSON.stringify(user))\r\n    const result: IHandleDataResponse = dataHandle(data, area, req.areaCode)\r\n\r\n    ctx.body = {\r\n      code: 10011,\r\n      message: 'data取得成功',\r\n      result: result,\r\n    }\r\n    ctx.app.emit('log', 'data読み取り')\r\n  } catch {\r\n    ctx.app.emit('error', 10012, ctx)\r\n  }\r\n}\r\n\r\nexport default dataController\r\n","import { Model } from 'mongoose'\r\nimport type { ICTXPost, ICTXPut, ICTXDelete, ICTXGet } from '../../types/ctx.type'\r\nimport type { IFormSchema, IFormResponse, IFormKey } from '../../types/form.type'\r\n\r\n// ----- フォーム類CRUD controller unit -----\r\n/**\r\n *  読み取り\r\n *  @param {Model<IFormSchema>}model フォーム類のコレクション\r\n *  @param {Object | {}} condition 読み取りの条件\r\n *  @param {*} ctx koaコンテンツ\r\n */\r\n\r\nconst find = async (model: Model<IFormSchema>, condition: any = {}, ctx: ICTXGet<{}, IFormResponse>): Promise<void> => {\r\n  ctx.app.emit('log', '読み取り')\r\n\r\n  await model\r\n    .find(condition, { _id: 0 })\r\n    .then((res): void => {\r\n      ctx.body = {\r\n        code: 10011,\r\n        message: '取得成功',\r\n        result: res,\r\n      }\r\n    })\r\n    .catch((): void => {\r\n      ctx.app.emit('error', 10012, ctx)\r\n    })\r\n}\r\n\r\n/**\r\n *  追加\r\n *  @param {Model<IFormSchema>} model フォーム類のコレクション\r\n *  @param {*} ctx koaコンテンツ\r\n */\r\n\r\nconst create = async (model: Model<IFormSchema>, ctx: ICTXPost<IFormSchema, ''>): Promise<void> => {\r\n  ctx.app.emit('log', '追加')\r\n\r\n  const doc = new model(ctx.request.body)\r\n  await doc\r\n    .save()\r\n    .then((): void => {\r\n      ctx.body = {\r\n        code: 10013,\r\n        message: '追加成功',\r\n        result: '',\r\n      }\r\n    })\r\n    .catch((): void => {\r\n      ctx.app.emit('error', 10014, ctx)\r\n    })\r\n}\r\n\r\n/**\r\n *  更新\r\n *  @param {Model<IFormSchema>} model フォーム類のコレクション\r\n *  @param {*} ctx koaコンテンツ\r\n */\r\n\r\nconst update = async (model: Model<IFormSchema>, ctx: ICTXPut<IFormKey, IFormSchema, ''>): Promise<void> => {\r\n  ctx.app.emit('log', '更新')\r\n\r\n  await model\r\n    .updateOne(ctx.params, { text: ctx.request.body?.text })\r\n    .then((res): void => {\r\n      if (res.matchedCount === 0) {\r\n        ctx.app.emit('error', 10022, ctx)\r\n      } else {\r\n        ctx.body = {\r\n          code: 10015,\r\n          message: '更新成功',\r\n          result: '',\r\n        }\r\n      }\r\n    })\r\n    .catch((): void => {\r\n      ctx.app.emit('error', 10016, ctx)\r\n    })\r\n}\r\n\r\n/**\r\n *  削除\r\n *  @param {Model<IFormSchema>} model フォーム類のコレクション\r\n *  @param {*} ctx koaコンテンツ\r\n */\r\n\r\nconst remove = async (model: Model<IFormSchema>, ctx: ICTXDelete<IFormKey, ''>): Promise<void> => {\r\n  ctx.app.emit('log', '削除')\r\n\r\n  await model\r\n    .deleteOne(ctx.params)\r\n    .then((res): void => {\r\n      if (res.deletedCount === 0) {\r\n        ctx.app.emit('error', 10022, ctx)\r\n      } else {\r\n        ctx.body = {\r\n          code: 10017,\r\n          message: '削除成功',\r\n          result: '',\r\n        }\r\n      }\r\n    })\r\n    .catch((): void => {\r\n      ctx.app.emit('error', 10018, ctx)\r\n    })\r\n}\r\n\r\nexport default { find, create, update, remove }\r\n","import jobs from '../models/jobs.model'\r\nimport unit from './units/form.crud'\r\nimport type { ICTXPost, ICTXPut, ICTXDelete, ICTXGet } from '../types/ctx.type'\r\nimport type { IFormSchema, IFormResponse, IFormKey } from '../types/form.type'\r\n\r\n// ----- 職務CRUD controller -----\r\n// 読み取り\r\nconst jobFind = async (ctx: ICTXGet<{}, IFormResponse>): Promise<void> => {\r\n  await unit.find(jobs, {}, ctx)\r\n}\r\n\r\n// 追加\r\nconst jobadd = async (ctx: ICTXPost<IFormSchema, ''>): Promise<void> => {\r\n  await unit.create(jobs, ctx)\r\n}\r\n\r\n// 更新\r\nconst jobUpdate = async (ctx: ICTXPut<IFormKey, IFormSchema, ''>): Promise<void> => {\r\n  await unit.update(jobs, ctx)\r\n}\r\n\r\n// 削除\r\nconst jobdelete = async (ctx: ICTXDelete<IFormKey, ''>): Promise<void> => {\r\n  await unit.remove(jobs, ctx)\r\n}\r\n\r\nexport default { jobFind, jobadd, jobUpdate, jobdelete }\r\n","import Log from 'log4js'\r\n\r\n// ----- サーバーログ処理 -----\r\n// logサイズ\r\nconst max: number = 10000\r\n\r\n// log4jsコンフィグ\r\nLog.configure({\r\n  appenders: {\r\n    info: {\r\n      type: 'dateFile',\r\n      filename: 'logs/info.log',\r\n      pattern: 'yyyy-MM-dd.log',\r\n      encoding: 'utf-8',\r\n      maxLogSize: max,\r\n    },\r\n    error: {\r\n      type: 'dateFile',\r\n      filename: 'logs/error.log',\r\n      pattern: 'yyyy-MM-dd.log',\r\n      encoding: 'utf-8',\r\n      maxLogSize: max,\r\n    },\r\n  },\r\n\r\n  categories: {\r\n    default: { appenders: ['info'], level: 'info' },\r\n    info: { appenders: ['info'], level: 'info' },\r\n    error: { appenders: ['error'], level: 'error' },\r\n  },\r\n})\r\n\r\n/**\r\n *  エラーログ処理\r\n *  @param {string} content ログの内容\r\n */\r\n\r\nconst logError = (content: string): void => {\r\n  const log = Log.getLogger('error')\r\n  log.error(content)\r\n}\r\n\r\n/**\r\n *  一般的なログ処理\r\n *  @param {string} content ログの内容\r\n */\r\n\r\nconst logInfo = (content: string): void => {\r\n  const log = Log.getLogger('info')\r\n  log.info(content)\r\n}\r\n\r\nexport { logError, logInfo }\r\n","import config from '../../config'\r\nimport jsonwebtoken from 'jsonwebtoken'\r\nimport { logError } from '../../log'\r\nimport { Context, Next } from 'koa'\r\nimport type { IJwt } from '../../types/auth.type'\r\n\r\n/**\r\n *  jwt 権限処理ミドルウェア\r\n *  @param ctx koaコンテンツ\r\n *  @param next Next = () => Promise<any>\r\n */\r\n\r\nexport default (ctx: Context, next: Next): Promise<Next> | undefined => {\r\n  const token = ctx.header.authorization?.split(' ')[1] as string\r\n\r\n  try {\r\n    const authorization = jsonwebtoken.verify(token, config.secret) as IJwt\r\n\r\n    if (authorization.permission === 2) {\r\n      // guest\r\n      logError('10010 : JWT権限足りません')\r\n\r\n      ctx.status = 400\r\n      ctx.body = {\r\n        code: 10010,\r\n        message: 'JWT権限足りません',\r\n        result: '',\r\n      }\r\n    } else {\r\n      // admin&master\r\n      return next()\r\n    }\r\n  } catch {\r\n    ctx.app.emit('error', 10004, ctx)\r\n  }\r\n}\r\n","import Router from 'koa-router'\r\nimport jobController from '../../controllers/job.controller'\r\nimport checkPermission from '../../middleware/jwt/checkPermission'\r\n\r\n// ----- 職務 router -----\r\n\r\nconst jobRouter = new Router()\r\n\r\n// 読み取り\r\njobRouter.get('/', jobController.jobFind)\r\n\r\n// 追加\r\njobRouter.post('/', checkPermission, jobController.jobadd)\r\n\r\n// 更新\r\njobRouter.put('/:value', checkPermission, jobController.jobUpdate)\r\n\r\n// 削除\r\njobRouter.delete('/:value', checkPermission, jobController.jobdelete)\r\n\r\nexport default jobRouter\r\n","import races from '../models/races.model'\r\nimport unit from './units/form.crud'\r\nimport type { ICTXPost, ICTXPut, ICTXDelete, ICTXGet } from '../types/ctx.type'\r\nimport type { IFormSchema, IFormResponse, IFormKey } from '../types/form.type'\r\n\r\n// ----- 種族CRUD controller -----\r\n// 読み取り\r\nconst raceFind = async (ctx: ICTXGet<{}, IFormResponse>): Promise<void> => {\r\n  await unit.find(races, {}, ctx)\r\n}\r\n\r\n// 追加\r\nconst raceAdd = async (ctx: ICTXPost<IFormSchema, ''>): Promise<void> => {\r\n  await unit.create(races, ctx)\r\n}\r\n\r\n// 更新\r\nconst raceUpdate = async (ctx: ICTXPut<IFormKey, IFormSchema, ''>): Promise<void> => {\r\n  await unit.update(races, ctx)\r\n}\r\n\r\n// 削除\r\nconst raceDelete = async (ctx: ICTXDelete<IFormKey, ''>): Promise<void> => {\r\n  await unit.remove(races, ctx)\r\n}\r\n\r\nexport default { raceFind, raceAdd, raceUpdate, raceDelete }\r\n","import Router from 'koa-router'\r\nimport raceController from '../../controllers/race.controller'\r\nimport checkPermission from '../../middleware/jwt/checkPermission'\r\n\r\n// ----- 種族 router -----\r\n\r\nconst raceRouter = new Router()\r\n\r\n// 読み取り\r\nraceRouter.get('/', raceController.raceFind)\r\n\r\n// 追加\r\nraceRouter.post('/', checkPermission, raceController.raceAdd)\r\n\r\n// 更新\r\nraceRouter.put('/:value', checkPermission, raceController.raceUpdate)\r\n\r\n// 削除\r\nraceRouter.delete('/:value', checkPermission, raceController.raceDelete)\r\n\r\nexport default raceRouter\r\n","import users from '../models/users.model'\r\nimport type { ICTXPost, ICTXPut, ICTXDelete, ICTXGet } from '../types/ctx.type'\r\nimport type { IUserSchema, IUserKey } from '../types/user.type'\r\n\r\n// ----- メンバーCRUD controller -----\r\n/**\r\n *  読み取り\r\n *  @param {ICTXGet<{}, IUserSchema[]>} ctx koaコンテンツget\r\n */\r\n\r\nconst userFind = async (ctx: ICTXGet<{}, IUserSchema[]>): Promise<void> => {\r\n  await users\r\n    .find({}, { _id: 0 })\r\n    .then((res): void => {\r\n      ctx.body = {\r\n        code: 10011,\r\n        message: '取得成功',\r\n        result: res,\r\n      }\r\n    })\r\n    .catch((): void => {\r\n      ctx.app.emit('error', 10012, ctx)\r\n    })\r\n}\r\n\r\n/**\r\n *  追加\r\n *  @param {ICTXPost<IUserSchema, ''>} ctx koaコンテンツpost\r\n */\r\n\r\nconst userAdd = async (ctx: ICTXPost<IUserSchema, ''>): Promise<void> => {\r\n  const doc = new users(ctx.request.body)\r\n\r\n  await doc\r\n    .save()\r\n    .then((): void => {\r\n      ctx.body = {\r\n        code: 10013,\r\n        message: '追加成功',\r\n        result: '',\r\n      }\r\n    })\r\n    .catch((): void => {\r\n      ctx.app.emit('error', 10014, ctx)\r\n    })\r\n}\r\n\r\n/**\r\n *  更新\r\n *  @param {ICTXPut<IUserKey, IUserSchema, ''>} ctx koaコンテンツput\r\n */\r\n\r\nconst userUpdate = async (ctx: ICTXPut<IUserKey, IUserSchema, ''>): Promise<void> => {\r\n  console.log(ctx.params.id)\r\n\r\n  await users\r\n    .updateOne({ id: ctx.params.id }, ctx.request.body)\r\n    .then((res): void => {\r\n      if (res.matchedCount === 0) {\r\n        ctx.app.emit('error', 10022, ctx)\r\n      } else {\r\n        ctx.body = {\r\n          code: 10015,\r\n          message: '更新成功',\r\n          result: '',\r\n        }\r\n      }\r\n    })\r\n    .catch((): void => {\r\n      ctx.app.emit('error', 10016, ctx)\r\n    })\r\n}\r\n\r\n/**\r\n *  削除\r\n *  @param {ICTXDelete<IUserKey, ''>} ctx koaコンテンツdelete\r\n */\r\n\r\nconst userDelete = async (ctx: ICTXDelete<IUserKey, ''>): Promise<void> => {\r\n  ctx.app.emit('log', '削除')\r\n\r\n  await users\r\n    .deleteOne({ id: ctx.params.id })\r\n    .then((res): void => {\r\n      if (res.deletedCount === 0) {\r\n        ctx.app.emit('error', 10022, ctx)\r\n      } else {\r\n        ctx.body = {\r\n          code: 10017,\r\n          message: '削除成功',\r\n          result: '',\r\n        }\r\n      }\r\n    })\r\n    .catch((): void => {\r\n      ctx.app.emit('error', 10018, ctx)\r\n    })\r\n}\r\n\r\nexport default { userFind, userAdd, userUpdate, userDelete }\r\n","import Router from 'koa-router'\r\nimport userController from '../../controllers/user.controller'\r\nimport checkPermission from '../../middleware/jwt/checkPermission'\r\n\r\n// ----- メンバー router -----\r\n\r\nconst userRouter = new Router()\r\n\r\n// 読み取り\r\nuserRouter.get('/', userController.userFind)\r\n\r\n// 追加\r\nuserRouter.post('/', checkPermission, userController.userAdd)\r\n\r\n// 更新\r\nuserRouter.put('/:id', checkPermission, userController.userUpdate)\r\n\r\n// 削除\r\nuserRouter.delete('/:id', checkPermission, userController.userDelete)\r\n\r\nexport default userRouter\r\n","import areas from '../models/areas.model'\r\nimport unit from './units/form.crud'\r\nimport type { ICTXGet } from '../types/ctx.type'\r\nimport type { IFormResponse } from '../types/form.type'\r\n\r\n// ----- エリアCRUD controller -----\r\nconst areaController = async (ctx: ICTXGet<{}, IFormResponse>): Promise<void> => {\r\n  await unit.find(areas, {}, ctx)\r\n}\r\n\r\nexport default areaController\r\n","import Router from 'koa-router'\r\nimport areaController from '../../controllers/area.controller'\r\n\r\n// ----- エリア router -----\r\n\r\nconst areaRouter = new Router()\r\n\r\nareaRouter.get('/', areaController)\r\n\r\nexport default areaRouter\r\n","import names from '../models/names.model'\r\nimport unit from './units/form.crud'\r\nimport type { ICTXGet } from '../types/ctx.type'\r\nimport type { IFormResponse } from '../types/form.type'\r\n\r\n// ----- ネームCRUD controller -----\r\nconst nameController = async (ctx: ICTXGet<{}, IFormResponse>): Promise<void> => {\r\n  await unit.find(names, {}, ctx)\r\n}\r\n\r\nexport default nameController\r\n","import Router from 'koa-router'\r\nimport nameController from '../../controllers/name.controller'\r\n\r\n// ----- ネーム router -----\r\n\r\nconst nameRouter = new Router()\r\n\r\nnameRouter.get('/', nameController)\r\n\r\nexport default nameRouter\r\n","import { Schema, model } from 'mongoose'\r\nimport type { IAuth } from '../types/auth.type'\r\n\r\n// ----- 管理者 -----\r\n// schema\r\nconst schema = new Schema<IAuth>(\r\n  {\r\n    id: { type: String, required: true },\r\n    passWord: { type: String, required: true },\r\n    permission: { type: Number, required: true },\r\n    time: { type: String, required: true },\r\n    token: { type: String, required: true },\r\n  },\r\n  { versionKey: false },\r\n)\r\n\r\n// model\r\nconst auths = model<IAuth>('auths', schema)\r\n\r\nexport default auths\r\n","import dayjs from 'dayjs'\r\nimport config from '../config'\r\nimport CryptoJS from 'crypto-js'\r\nimport auths from '../models/auth.model'\r\nimport jsonwebtoken from 'jsonwebtoken'\r\nimport type { IAuth, IAuthResponse } from '../types/auth.type'\r\nimport type { ICTXPost, ICTXPut, ICTXDelete, ICTXGet } from '../types/ctx.type'\r\n\r\n// ----- 管理者認証関係 controller -----\r\n\r\n/**\r\n *  暗号解読\r\n *  @param {string} word 暗号化したパスワード\r\n *  @return {string} パスワード\r\n */\r\n\r\nconst decrypt = (word: string) => {\r\n  const key = CryptoJS.enc.Utf8.parse(config.passwordKey)\r\n  const iv = CryptoJS.enc.Utf8.parse(config.passwordIV)\r\n  const encryptedHexStr = CryptoJS.enc.Hex.parse(word)\r\n  const srcs = CryptoJS.enc.Base64.stringify(encryptedHexStr)\r\n  const decrypt = CryptoJS.AES.decrypt(srcs, key, { iv: iv, mode: CryptoJS.mode.CBC, padding: CryptoJS.pad.Pkcs7 })\r\n  const decryptedStr = decrypt.toString(CryptoJS.enc.Utf8)\r\n  return decryptedStr.toString()\r\n}\r\n\r\n/**\r\n *  ログイン\r\n *  @param {ICTXPost<IAuth, IAuth | ''>} ctx koaコンテンツ\r\n */\r\n\r\nconst login = async (ctx: ICTXPost<IAuth, IAuth | ''>): Promise<void> => {\r\n  // 暗号解読\r\n  const password: string = await decrypt(ctx.request.body!.passWord)\r\n\r\n  await auths\r\n    .find({ id: ctx.request.body?.id }, { _id: 0 })\r\n    .then((res): void => {\r\n      // 無効なID\r\n      if (res.length === 0) {\r\n        ctx.body = {\r\n          code: 10002,\r\n          message: 'idは存在しないです',\r\n          result: '',\r\n        }\r\n\r\n        return\r\n      }\r\n\r\n      // ログイン成功\r\n      if (password === res[0].passWord) {\r\n        // token作成\r\n        const token: string = jsonwebtoken.sign(\r\n          {\r\n            id: res[0].id,\r\n            permission: res[0].permission,\r\n            exp: config.jwtLimitTime,\r\n          },\r\n          config.secret,\r\n        )\r\n\r\n        ctx.body = {\r\n          code: 10001,\r\n          message: 'ログイン成功しました',\r\n          result: {\r\n            id: res[0].id,\r\n            passWord: '*****',\r\n            permission: res[0].permission,\r\n            time: res[0].time,\r\n            token: token,\r\n          },\r\n        }\r\n\r\n        ctx.app.emit('log', `ログイン--${ctx.request.body?.passWord}`)\r\n        auths.updateOne({ id: res[0].id }, { time: dayjs().format('YYYY-MM-DD HH:mm:ss'), token: token }).then()\r\n      } else {\r\n        // 無効なパスワード\r\n        ctx.body = {\r\n          code: 10003,\r\n          message: 'パスワードが間違いました',\r\n          result: '',\r\n        }\r\n      }\r\n    })\r\n    .catch((): void => {\r\n      ctx.app.emit('error', 10004, ctx)\r\n    })\r\n}\r\n\r\n/**\r\n *  ログアウト\r\n *  @param {ICTXDelete<'id', ''>} ctx koaコンテンツ\r\n */\r\n\r\nconst logout = async (ctx: ICTXDelete<'id', ''>): Promise<void> => {\r\n  await auths\r\n    .updateOne({ id: ctx.params.id }, { token: '' })\r\n    .then(() => {\r\n      console.log(`${ctx.params.id} is Logout`)\r\n      ctx.app.emit('log', `ログアウト--${ctx.params.id}`)\r\n\r\n      ctx.body = {\r\n        code: 10008,\r\n        message: 'ログアウト成功しました',\r\n        result: '',\r\n      }\r\n    })\r\n    .catch((): void => {\r\n      ctx.app.emit('error', 10004, ctx)\r\n    })\r\n}\r\n\r\n/**\r\n *  すべての管理者情報取得\r\n *  @param {ICTXGet<{}, IAuthResponse>} ctx koaコンテンツ\r\n */\r\n\r\nconst authFind = async (ctx: ICTXGet<{}, IAuthResponse>): Promise<void> => {\r\n  ctx.app.emit('log', '管理者情報取得')\r\n\r\n  await auths\r\n    .find({}, { _id: 0, passWord: 0 })\r\n    .then((res): void => {\r\n      ctx.body = {\r\n        code: 10000,\r\n        message: '管理者情報取得成功',\r\n        result: res,\r\n      }\r\n    })\r\n    .catch((): void => {\r\n      ctx.app.emit('error', 10006, ctx)\r\n    })\r\n}\r\n\r\n/**\r\n *  管理者のパスワード修正\r\n *  @param {ICTXPut<'id', Record<'passWord', string>, ''>} ctx koaコンテンツ\r\n */\r\n\r\nconst authUpdate = async (ctx: ICTXPut<'id', Record<'passWord', string>, ''>): Promise<void> => {\r\n  const password: string = await decrypt(ctx.request.body!.passWord)\r\n  ctx.app.emit('log', '管理者のパスワード修正')\r\n\r\n  await auths\r\n    .updateOne({ id: ctx.params.id }, { passWord: password })\r\n    .then((): void => {\r\n      ctx.body = {\r\n        code: 10000,\r\n        message: '管理者のパスワード修正成功',\r\n        result: '',\r\n      }\r\n    })\r\n    .catch((): void => {\r\n      ctx.app.emit('error', 10007, ctx)\r\n    })\r\n}\r\n\r\nexport default { login, logout, authFind, authUpdate }\r\n","import Router from 'koa-router'\r\nimport authController from '../../controllers/auth.controller'\r\n\r\n// ----- 管理者関連 router -----\r\n\r\nconst authRouter = new Router()\r\n\r\n// ログイン\r\nauthRouter.post('/', authController.login)\r\n\r\n// ログアウト\r\nauthRouter.delete('/:id', authController.logout)\r\n\r\n// すべての管理者情報取得\r\nauthRouter.get('/', authController.authFind)\r\n\r\n// 管理者のパスワード修正\r\nauthRouter.patch('/:id', authController.authUpdate)\r\n\r\nexport default authRouter\r\n","import Router from 'koa-router'\r\nimport config from '../config'\r\nimport formRouter from './routes/form.route'\r\nimport dataRouter from './routes/data.route'\r\nimport jobRouter from './routes/job.route'\r\nimport raceRouter from './routes/race.route'\r\nimport userRouter from './routes/user.route'\r\nimport areaRouter from './routes/area.route'\r\nimport nameRouter from './routes/name.route'\r\nimport authRouter from './routes/auth.route'\r\n\r\n// ----- koa router -----\r\n\r\nconst router = new Router()\r\nrouter.prefix(config.apiPrefix)\r\n\r\n// client\r\nrouter.use('/form', formRouter.routes(), formRouter.allowedMethods())\r\nrouter.use('/data', dataRouter.routes(), dataRouter.allowedMethods())\r\n\r\n// admin\r\nrouter.use('/job', jobRouter.routes(), jobRouter.allowedMethods())\r\nrouter.use('/race', raceRouter.routes(), raceRouter.allowedMethods())\r\nrouter.use('/user', userRouter.routes(), userRouter.allowedMethods())\r\nrouter.use('/area', areaRouter.routes(), areaRouter.allowedMethods())\r\nrouter.use('/name', nameRouter.routes(), nameRouter.allowedMethods())\r\nrouter.use('/auth', authRouter.routes(), authRouter.allowedMethods())\r\n\r\nexport default router\r\n","import { ApolloError } from 'apollo-server-errors'\r\n\r\n// ----- GraphQL エラー処理 -----\r\n\r\n/**\r\n *  カスタマイズのApollo GraphQLエラー処理\r\n *  @param {string} message テキスト\r\n *  @param {string} code エラーコード\r\n */\r\n\r\nclass errorGraphQL extends ApolloError {\r\n  constructor(message: string, code: string) {\r\n    super(message, code)\r\n\r\n    Object.defineProperty(this, 'name', { value: 'errorGraphQL' })\r\n  }\r\n}\r\n\r\nnew errorGraphQL('graphqlform読み取り失敗', '10012')\r\n\r\nexport default errorGraphQL\r\n","import areas from '../../models/areas.model'\r\nimport names from '../../models/names.model'\r\nimport jobs from '../../models/jobs.model'\r\nimport races from '../../models/races.model'\r\nimport errorGraphQL from '../../error/errorGraphQL'\r\nimport { Context } from 'koa'\r\nimport type { IFormSchema, IFormGroupResponse } from '../../types/form.type'\r\n\r\n// ----- フォーム resolvers -----\r\n\r\ntype key = 'area' | 'name' | 'race' | 'job'\r\n\r\n/**\r\n *  graphql form 読み取り\r\n *  @param {string} key 'area' | 'name' | 'race' | 'job'\r\n *  @param {Context} ctx Context\r\n *  @return area | name | race | job\r\n */\r\n\r\nconst formResolver = async (key: key, ctx: Context): Promise<IFormSchema[]> => {\r\n  try {\r\n    ctx.app.emit('log', 'graphqlform読み取り')\r\n\r\n    const area: IFormSchema[] = await areas.find({}, { _id: 0 })\r\n    const name: IFormSchema[] = await names.find({}, { _id: 0 })\r\n    const race: IFormSchema[] = await races.find({}, { _id: 0 })\r\n    const job: IFormSchema[] = await jobs.find({}, { _id: 0 })\r\n    const result: IFormGroupResponse = { area, name, race, job }\r\n\r\n    return result[key]\r\n  } catch {\r\n    throw new errorGraphQL('graphqlform読み取り失敗', '10021')\r\n  }\r\n}\r\n\r\nexport default formResolver\r\n","import { gql } from 'apollo-server-koa'\r\n\r\n// ----- GraphQL タイプ -----\r\n// typeDefs\r\nconst typeDefs = gql`\r\n  \"form\"\r\n  type Form {\r\n    value: String\r\n    text: String\r\n  }\r\n\r\n  \"count\"\r\n  type Count {\r\n    count: Int\r\n    area: String\r\n    value: Int\r\n  }\r\n\r\n  \"user\"\r\n  type User {\r\n    id: String\r\n    name: String\r\n    nameSpell: String\r\n    nameCode: String\r\n    job: String\r\n    jobCode: String\r\n    race: String\r\n    raceCode: String\r\n    skill: String\r\n    photo: String\r\n    area: String\r\n    areaCode: String\r\n    YYYYMMDD: String\r\n    HHMMss: String\r\n  }\r\n\r\n  \"data\"\r\n  type Data {\r\n    count: [Count]\r\n    user: [User]\r\n  }\r\n\r\n  \"query\"\r\n  type Query {\r\n    code: Int\r\n    message: String\r\n    area: [Form]\r\n    name: [Form]\r\n    race: [Form]\r\n    job: [Form]\r\n    data(areaCode: String, jobCode: [String], nameCode: [String], raceCode: [String]): Data\r\n  }\r\n`\r\n\r\nexport default typeDefs\r\n","import { ApolloServer } from 'apollo-server-koa'\r\nimport formResolver from './resolvers/form.resolvers'\r\nimport dataResolver from './resolvers/data.resolvers'\r\nimport typeDefs from './schema/typeDefs'\r\nimport Koa, { DefaultState, DefaultContext, Context } from 'koa'\r\nimport type { IDataRequest } from '../types/user.type'\r\n\r\n// ----- GraphQL -----\r\n// ctxのタイプ\r\ntype ICTX = {\r\n  ctx: Context\r\n}\r\n\r\n// graphql resolvers\r\nconst resolvers = {\r\n  Query: {\r\n    // リクエスト情報（成功した時のみ）\r\n    code: () => 10011,\r\n    message: () => 'graphql取得成功',\r\n\r\n    // form\r\n    area: async (obj: undefined, args: undefined, ctx: ICTX) => await formResolver('area', ctx.ctx),\r\n    name: async (obj: undefined, args: undefined, ctx: ICTX) => await formResolver('name', ctx.ctx),\r\n    race: async (obj: undefined, args: undefined, ctx: ICTX) => await formResolver('race', ctx.ctx),\r\n    job: async (obj: undefined, args: undefined, ctx: ICTX) => await formResolver('job', ctx.ctx),\r\n\r\n    // data\r\n    data: async (obj: undefined, args: IDataRequest, ctx: ICTX) => await dataResolver(args, ctx.ctx),\r\n  },\r\n}\r\n\r\n// graphql server\r\nconst server = new ApolloServer({\r\n  typeDefs,\r\n  resolvers,\r\n  context: ({ ctx }) => ({ ctx }),\r\n  introspection: process.env.NODE_ENV === 'development' ? true : false,\r\n})\r\n\r\n/**\r\n *  apollo graphql起動\r\n *  @param {Koa<DefaultState, DefaultContext>} app koa app\r\n */\r\n\r\nconst apolloServer = async (app: Koa<DefaultState, DefaultContext>): Promise<void> => {\r\n  await server.start()\r\n  server.applyMiddleware({ app })\r\n}\r\n\r\nexport default apolloServer\r\n","import users from '../../models/users.model'\r\nimport areas from '../../models/areas.model'\r\nimport errorGraphQL from '../../error/errorGraphQL'\r\nimport dataHandle from '../../controllers/units/data.handle'\r\nimport { Context } from 'koa'\r\nimport type { IFormSchema } from '../../types/form.type'\r\nimport type { IDataRequest, IUserSchema, IDataResponse, IHandleDataResponse } from '../../types/user.type'\r\n\r\n// ----- データ resolvers -----\r\n\r\n/**\r\n *  graphql data 読み取り\r\n *  @param {Object} args areaCode, raceCode, nameCode, jobCode\r\n *  @param {Context} ctx Context\r\n *  @return data & count\r\n */\r\n\r\nconst dataResolver = async (args: IDataRequest, ctx: Context): Promise<IHandleDataResponse> => {\r\n  try {\r\n    ctx.app.emit('log', 'graphqldata読み取り')\r\n\r\n    // エリア,ユーザー取得\r\n    const area: IFormSchema[] = await areas.find({}, { _id: 0 })\r\n    const user: IUserSchema[] = await users.find(\r\n      {\r\n        raceCode: args.raceCode.length === 0 ? { $type: 'string' } : { $in: args.raceCode },\r\n        nameCode: args.nameCode.length === 0 ? { $type: 'string' } : { $in: args.nameCode },\r\n        jobCode: args.jobCode.length === 0 ? { $type: 'string' } : { $in: args.jobCode },\r\n      },\r\n      { _id: 0 },\r\n    )\r\n\r\n    // データ処理\r\n    const data: IDataResponse = JSON.parse(JSON.stringify(user))\r\n    const result: IHandleDataResponse = dataHandle(data, area, args.areaCode)\r\n\r\n    return result\r\n  } catch {\r\n    throw new errorGraphQL('graphqldata読み取り失敗', '10021')\r\n  }\r\n}\r\n\r\nexport default dataResolver\r\n","import { Context } from 'koa'\r\nimport { logError } from '../log'\r\nimport type { IResponse } from '../types/ctx.type'\r\n\r\n// ----- サーバーエラー処理 -----\r\n// エラーコードはerror.mdに参照してください\r\n\r\n// デフォルトデータ\r\nlet status: number = 500\r\nlet body: IResponse = {\r\n  code: 9999,\r\n  message: 'プログラムエラー',\r\n  result: '',\r\n}\r\n\r\n/**\r\n *  エラー処理\r\n *  @param {number}  code グロバルエラーコード\r\n *  @param {Context} ctx koaコンテンツ\r\n */\r\n\r\nconst error = async (code: number, ctx: Context): Promise<void> => {\r\n  body.code = code\r\n\r\n  switch (code) {\r\n    case 10022:\r\n      status = 400\r\n      body.message = '無効なID'\r\n      break\r\n    case 10020:\r\n      status = 404\r\n      body.message = 'データは見つかりません'\r\n      break\r\n    case 10019:\r\n      status = 402\r\n      body.message = '無効なパラメータ'\r\n      break\r\n    case 10003:\r\n      status = 200\r\n      body.message = 'ログイン失敗しました'\r\n      break\r\n    case 10006:\r\n      status = 404\r\n      body.message = '管理者情報取得失敗しました'\r\n      break\r\n    case 10007:\r\n      status = 403\r\n      body.message = 'パスワード修正失敗しました'\r\n      break\r\n    case 10009:\r\n      status = 403\r\n      body.message = 'JWT認証失敗'\r\n      break\r\n    case 10010:\r\n      status = 400\r\n      body.message = 'JWT権限足りません'\r\n      break\r\n    case 10014:\r\n      status = 403\r\n      body.message = '追加失敗'\r\n      break\r\n    case 10012:\r\n      status = 403\r\n      body.message = '取得失敗'\r\n      break\r\n    case 10016:\r\n      status = 403\r\n      body.message = '更新失敗'\r\n      break\r\n    case 10018:\r\n      status = 403\r\n      body.message = '削除失敗'\r\n      break\r\n  }\r\n\r\n  ctx.status = status\r\n  ctx.body = body\r\n\r\n  const log: string = `${body.code} : ${body.message}`\r\n  logError(log)\r\n  console.log(log)\r\n}\r\n\r\nexport default error\r\n","// ######################################################\r\n// *\r\n// * 🌞Rrea-Server\r\n// * by renhou 2022\r\n// *\r\n// * github: https://github.com/kensoz/Rrea-server\r\n// * Koa.js(TypeScript) + rollup + Jest + mongoose\r\n// * providing Restful api & GraphQL\r\n// *\r\n// ######################################################\r\n\r\nimport Koa from 'koa'\r\nimport koaBody from 'koa-body'\r\nimport koaLogger from 'koa-logger'\r\nimport config from './config'\r\nimport routers from './router'\r\nimport apolloServer from './graphql'\r\nimport error from './error'\r\nimport jwt from 'koa-jwt'\r\nimport { logInfo } from './log'\r\nimport { connectMongoDB } from './database'\r\nimport jwtErrorHandle from './middleware/jwt/jwtErrorHandle'\r\n\r\nconst app = new Koa()\r\n\r\n// データベース起動\r\nconnectMongoDB()\r\n\r\n// jwt認証\r\napp.use(jwtErrorHandle)\r\napp.use(\r\n  jwt({\r\n    secret: config.secret,\r\n  }).unless({\r\n    path: [/\\/graphql/, /\\/auth/, /\\/data/, /\\/form/],\r\n  }),\r\n)\r\n\r\n// ミドルウェア\r\napp.use(koaLogger())\r\napp.use(koaBody())\r\napp.use(routers.routes()).use(routers.allowedMethods())\r\n\r\n// エラー、ログ処理\r\napp.on('error', error)\r\napp.on('log', logInfo)\r\n\r\n// Apollo Graphql起動\r\napolloServer(app)\r\n\r\n// サーバ起動と導出\r\nexport default app.listen(config.host, async (): Promise<void> => {\r\n  console.log(`server running on port ${config.host} 🚀`)\r\n  console.log(process.env.NODE_ENV === 'development' ? 'Rrea-server dev 💪' : 'Rrea-serverへようこそ！🤣')\r\n  process.env.NODE_ENV === 'development' || logInfo('production server start!')\r\n})\r\n","import { connect, disconnect } from 'mongoose'\r\nimport config from '../config'\r\n\r\n// データベース起動\r\nconst connectMongoDB = async (): Promise<void> => {\r\n  await connect(config.dataBaseUrl + config.dataBase)\r\n    .then((): void => {\r\n      console.log('mongodb connect success')\r\n    })\r\n    .catch((): void => {\r\n      console.log('mongodb connect failed')\r\n    })\r\n}\r\n\r\n// データベースクローズ\r\nconst disconnectMongoDB = async (): Promise<void> => {\r\n  await disconnect()\r\n    .then((): void => {\r\n      console.log('mongodb disconnect success')\r\n    })\r\n    .catch((): void => {\r\n      console.log('mongodb disconnect failed')\r\n    })\r\n}\r\n\r\nexport { connectMongoDB, disconnectMongoDB }\r\n","import { logError } from '../../log'\r\nimport { Context, Next } from 'koa'\r\n\r\n/**\r\n *  jwt 401処理ミドルウェア\r\n *  @param ctx koaコンテンツ\r\n *  @param next Next = () => Promise<any>\r\n */\r\n\r\nexport default (ctx: Context, next: Next): Promise<any> => {\r\n  return next().catch((err): void => {\r\n    if (err.status === 401) {\r\n      ctx.status = 401\r\n      ctx.body = {\r\n        code: 10009,\r\n        message: 'JWT認証失敗',\r\n        result: '',\r\n      }\r\n\r\n      logError('10009 : JWT認証失敗')\r\n    } else {\r\n      logError('9999 : プログラムエラー')\r\n    }\r\n  })\r\n}\r\n"],"names":["time","Math","floor","Date","now","config","host","process","env","NODE_ENV","apiPrefix","dataBase","dataBaseUrl","secret","jwtLimitTime","passwordKey","passwordIV","schema","Schema","value","type","String","required","text","versionKey","areas","model","names","jobs","races","formRouter","Router","get","async","ctx","area","find","_id","name","race","formResponseData","job","body","code","message","result","app","emit","id","nameSpell","nameCode","jobCode","raceCode","skill","photo","users","dataHandle","data","count","i","push","map","areaRandom","random","length","Object","assign","areaCode","YYYYMMDD","dayjs","format","HHMMss","Number","user","filter","sort","a","b","item","index","unshift","dataRouter","post","undefined","request","req","$type","$in","JSON","parse","stringify","unit","condition","then","res","catch","doc","save","updateOne","params","matchedCount","deleteOne","deletedCount","jobController","Log","configure","appenders","info","filename","pattern","encoding","maxLogSize","error","categories","default","level","logError","content","getLogger","logInfo","checkPermission","next","token","header","authorization","split","jsonwebtoken","verify","permission","status","jobRouter","put","delete","raceController","raceRouter","userController","console","log","userRouter","areaRouter","nameRouter","passWord","auths","decrypt","word","key","CryptoJS","enc","Utf8","iv","encryptedHexStr","Hex","srcs","Base64","AES","mode","CBC","padding","pad","Pkcs7","toString","authController","password","sign","exp","authRouter","patch","router","prefix","use","routes","allowedMethods","errorGraphQL","ApolloError","constructor","super","defineProperty","this","formResolver","typeDefs","gql","resolvers","Query","obj","args","dataResolver","server","ApolloServer","context","introspection","Koa","connect","connectMongoDB","err","jwt","unless","path","koaLogger","koaBody","routers","on","start","applyMiddleware","apolloServer","app$1","listen"],"mappings":"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"}